set nocompatible hidden laststatus=2
set backspace=indent,eol,start

let mapleader = ","

" TODO: autoload didn't work
source ~/.nvim/plug.vim

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-surround'

" Match XML tags
Plug 'tmhedberg/matchit'

" LSP support
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

"" Testing this also, since using nvim anyways:
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }


" Internals 
Plug 'tpope/vim-dispatch'  " asynchronous build and test dispatcher
Plug 'tpope/vim-unimpaired'
Plug 'VundleVim/Vundle.vim'
Plug 'tpope/vim-repeat'  " Repeat non-builtin commands with .

" Code 
Plug 'tpope/vim-commentary'  " Comment out stuff

" Git
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'  " Browse commits

" Registers
Plug 'junegunn/vim-peekaboo'

" SQL
" Plug 'vim-scripts/dbext.vim'
Plug 'tpope/vim-dadbod'

" File browsing etc
Plug 'scrooloose/nerdtree'
" Plug 'kien/ctrlp.vim'  " Fuzzy search for files
Plug 'junegunn/fzf.vim'  " Instead of ctrl-p
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-eunuch'  " Unix commands sugar

" Schemes
Plug 'altercation/vim-colors-solarized'

" Debugging
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'idanarye/vim-vebugger'

" Look
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Python
Plug 'alfredodeza/pytest.vim'
Plug 'davidhalter/jedi-vim'
Plug 'google/vim-maktaba'  " Required for vim-codefmt
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'  " Required for vim-codefmt
" Plug 'psf/black'

" Javascript
Plug 'prettier/vim-prettier'

" Text
Plug 'tpope/vim-abolish'
Plug 'brooth/far.vim'  " Find and replace

" Snippets
"Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'


" Undo
Plug 'sjl/gundo.vim'

" Search
Plug 'junegunn/vim-slash'  " makes `/` play nicer


call plug#end()

imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

let g:ack_default_options=' -s -H --nopager --nocolor --nogroup --column --ignore-file=is:tags'

" Yank should copy to the clipboard
set clipboard=unnamedplus

" Move faster between split panes (skip control-w)
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99

set encoding=utf-8

""" File browsing (NERDTree), searching etc """

" Can we use .gitignore instead?
let NERDTreeIgnore = ['\.pyc$', '\.egg-info$']

" Open NERDTree and find the current buffer
" TODO: NerdTreeFind if there is a buffer, otherwise nerdtreetoggle
nnoremap <silent> <F4> :NERDTreeFind<cr>
nnoremap <silent> <leader> <F4> :NERDTreeToggle<CR>

" ... then close when you've selected a file
let NERDTreeQuitOnOpen = 1
" Close buffers that have been deleted
let NERDTreeAutoDeleteBuffer = 1

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" " Check if NERDTree is open or active
" function! IsNERDTreeOpen()
"   return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
" endfunction

" " Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" " file, and we're not in vimdiff
" function! SyncTree()
"   if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
"     NERDTreeFind
"     wincmd p
"   endif
" endfunction

" " Highlight currently open buffer in NERDTree
" autocmd BufEnter * call SyncTree()

" Ignore files in e.g. CtrlP:
set wildignore+=*.pyc,*.zip,*.swp,node_modules/

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }

""" Git """

""" Testing """

""" Searching """
" let g:ack_use_dispatch=1
let g:ackprg='ag --nogroup --nocolor --column -i'

set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab

"""""""""""" Site specific """""""""""""""''
" TODO: run through all .vimrc* except .vimrc
source ~/.vimrc-snpseq

set guitablabel=\[%N\]\ %t\ %M

" git/fugitive
nnoremap <leader>z :Gstatus<cr> 

nnoremap <leader>m :Make<cr> 

" fzf 
nmap <Leader>b :Buffers<CR>
nmap <Leader>l :Lines<CR>
nmap <Leader>p :Files<CR>
nmap <Leader>x :History:<CR>
nnoremap <C-p> :Files<CR>
nnoremap ,f :Ag<Space>


" Search (grep, ack or actually ag)
:nnoremap gr :Ack! <cword><CR>

" Look
syntax enable
set background=dark
colorscheme solarized
" colorscheme seoul256

" Language specific
autocmd FileType javascript.jsx setlocal commentstring={/*\ %s\ */}
autocmd FileType javascript setlocal ts=2 sts=2 sw=2

" nnoremap ,f :Ack!<Space>
nnoremap ,t :!pytest -m now -s -v ./tests/clims/<CR>
nnoremap ,q l(v):DB postgresql:///clims<CR>

" Switch between most recently used buffers with tab
function! SwitchBuffer()
  b#
endfunction

nmap <Tab> :call SwitchBuffer()<CR>

" Ignore case while searching, but don't ignore if there is an upper-case
" character (smartcase)
set ignorecase
set smartcase
filetype on
filetype plugin on


" " LSP support according to https://github.com/autozimu/LanguageClient-neovim
" " Required for operations modifying multiple buffers like rename.
" let g:LanguageClient_serverCommands = {
"     \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
"     \ 'javascript': ['javascript-typescript-stdio'],
"     \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
"     \ 'python': ['/usr/local/bin/pyls'],
"     \ }

" nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" " Or map each action separately
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

let g:jsx_ext_required = 1
autocmd FileType javascript.jsx setlocal ts=2 sts=0 sw=2 expandtab



" autocomplete sanity
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

nnoremap <leader>w :normal! import traceback; print("HERE"); traceback.print_stack(limit=2)<ESC>

" Add breakpoints in the source
autocmd FileType python nnoremap <buffer> <leader>x :normal! oimport pdb; pdb.set_trace()<ESC>
set wrap

set colorcolumn=100

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

""" Snippets 

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" " If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" console.log the item under the cursor
autocmd FileType javascript.jsx nnoremap <buffer> <leader>c yawoxc€kb€kbconsole.log(pi);0w<ESC>

nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>

let g:python_host_prog = '/home/stest683/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/home/stest683/.pyenv/versions/neovim3/bin/python'
let g:jedi#completions_command = "<C-N>" 


" augroup autoformat_settings
"   autocmd FileType python AutoFormatBuffer yapf
" augroup END


" Undo info 
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile

" 'Stamp' a yanked word over the one we're in now. Allows for the workflow
" `yiw` => `S` e.g. when refactoring code.
nnoremap S diw"0P


" fzf settings
autocmd VimEnter *
\ command! -bang -nargs=* Ag
\ call fzf#vim#ag(<q-args>, '', { 'options': '--bind ctrl-a:select-all,ctrl-d:deselect-all' }, <bang>0)

set cursorline

