#!/bin/bash
set -e

current_branch=`git branch | grep "^*" | awk '{print $2}'`
test_name=$1
branch1=$2
branch2=$3
ignore=$4  # TODO: Option

if [ -z "$test_name" ]; then
    echo "Usage: test-with-trace [test_name] <branch1> <branch2>"
    echo "  If no branch is specified, just runs the test on the current branch"
    echo "  If one or more branch is specified, runs on all the branches"
    exit 1
fi

if [ -z "$branch1" ]; then
    echo "No branch set, running from $current_branch"
    branch1=$current_branch
fi

function test_on_branch {
    echo "=========================================="
    echo "= Testing on branch $1..."
    echo "=========================================="
    git checkout $1
    find . -name "*.pyc" -delete
    mkdir -p "./trace"
    tracefile="./trace/$2"
    echo "Writing output to $tracefile"
    test-with-trace.py $test_name $ignore > $tracefile 
    # Normalize line-numbers:
    perl -pe "s/^(.+.py)\((\d+)\)/\1(*)/" $tracefile > $tracefile.norm
}

test_on_branch $branch1 "from"

if [ -z "$branch2" ]; then
    echo "branch2 not set"
else
    test_on_branch $branch2 "to"
fi

echo "Switching back to $current_branch..."
git checkout $current_branch

if [ ! -z "$branch2" ]; then
    vimdiff "./trace/from.norm" "./trace/to.norm"
fi
